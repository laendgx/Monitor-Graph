package com.boco.service;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;

import com.boco.dao.DaoSupport;
import com.boco.domain.DeviceVarValueInfo;
import com.boco.domain.JkptTxxtDeviceCms;
import com.boco.domain.JkptTxxtFixedCommand;
import com.boco.domain.forebean.CmsIconsBean;
import com.boco.utils.ConfigReaderUtils;
import com.boco.utils.FileOperatorUtils;
/**
 * 可变情报板服务类
 * @author 孙冠义
 *
 */
@Service("cmsService")
public class CmsService {
	@Resource(name="daoSupport")
	private DaoSupport dao;
	
	/**
	 * 获取情报板固定播放表的最大可用id
	 * @return
	 * @throws Exception 
	 */
	private Integer getMaxCommandId() throws Exception{
		Integer id = (Integer) dao.findForObject("CmsMapper.getMaxCommandId", null);
		id++;
		return id;
	}
	
	/**
	 * 
	 * @param command
	 * @throws Exception
	 */
	public void insertCmsFixedCommand(JkptTxxtFixedCommand command) throws Exception{
		Integer id = this.getMaxCommandId();
		command.setCommandId(id);		
		dao.save("CmsMapper.insertCmsFixedCommand", command);
	}
	
	/**
	 * 查询情报板固定播放表
	 * @param commandType
	 * @param groupId
	 * @throws Exception 
	 */
	public List<JkptTxxtFixedCommand> getCmsFixedCommands(String commandType, String groupId) throws Exception{
		Map map = new HashMap();
		map.put("commandType", commandType);
		map.put("groupId", groupId);
		
		List<JkptTxxtFixedCommand> list = (List<JkptTxxtFixedCommand>) dao.findForList("CmsMapper.getCmsFixedCommands", map);
		return list;
	}
	
	/**
	 * 获取指定机构的可变情报板详细信息
	 * @param orgid
	 * @return
	 * @throws Exception 
	 */
	public List<JkptTxxtDeviceCms> getCmsBasicInfos(Integer orgid) throws Exception{
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("orgid", orgid);
		
		List<JkptTxxtDeviceCms> list = (List<JkptTxxtDeviceCms>) dao.findForList("CmsMapper.getCmsBasicInfos", map);
		return list;
	}
	
	/**
	 * 获取情报板的设备变量信息
	 * @return
	 * @throws Exception
	 */
	public List<DeviceVarValueInfo> getCmsDeviceVarValueInfos() throws Exception{
		List<DeviceVarValueInfo> list = (List<DeviceVarValueInfo>) dao.findForList("CmsMapper.getCmsDeviceVarValueInfos", null);
		return list;
	}
	
	/**
	 * 获取情报板的所有图标的名字
	 * @param request
	 * @return
	 */
	public CmsIconsBean getCmsIcons(HttpServletRequest request){
		String path = "/" + ConfigReaderUtils.getCmsIconRelativeAddr();
		System.out.println("path=" + path);
		String realPath = request.getSession().getServletContext().getRealPath(path);
		System.out.println("realPath=" + realPath);
		
		List<String> list = FileOperatorUtils.getFile(realPath);
				
		CmsIconsBean bean = new CmsIconsBean();
		bean.setAbsoluteAddr(path);
		bean.setIconNameList(list);
		return bean;
	}
}
