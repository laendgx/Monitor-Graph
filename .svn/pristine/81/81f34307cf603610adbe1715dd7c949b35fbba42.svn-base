(function(angular){

	var controllers = angular.module('app.controllers', []);

	controllers.controller('configController', ['$scope', '$filter', '$interval', '$timeout', '$http', 'socket', function($scope, $filter, $interval, $timeout, $http, socket){

        /* socket.io */
        socket.on("connect", function(){
            console.log('Client has connected to the server!');
        });
        
        socket.on("disconnect", function(){
            console.log('The client has disconnected!');
        });
        
        //数据
        socket.on("uploaddataEvent", function(data){
            var boo = $scope.uploadData(data);
            console.log(1);
            if(!boo){
                var timer = $interval(function(){
                    if($scope.io){
                        $scope.uploadData(data);
                        $interval.cancel(timer);
                    }
                }, 100);
            }
        });
        
        //告警
        socket.on("alertinfoEvent", function(data){
            var boo = $scope.uploadStatus(data);
            if(!boo){
                var timer = $interval(function(){
                    if($scope.io){
                        $scope.uploadStatus(data);
                        $interval.cancel(timer);
                    }
                }, 100);
            }
        });
            
        //发送标志
        socket.on("sendflagEvent", function(data){
            console.log(data);
        });
        /* socket.io END */

        $scope.editHeader = false;      // 判断显示标志
        $scope.io = false;              // 动态数据可以整合的标志
        $scope.getdataJson = {};        // http获取数据时，所需的条件数据
        $scope.cmsBasicInf = [];        // 存储情报板基本信息
        $scope.cmsInfo = {};            // 存储选择的情报板信息
        $scope.deviceMap = new Map();   // 
        $scope.cmsTimer = '';           // 选择的情报板的轮巡定时器
        $scope.cmsProgram = [];         // 用于存放选择的情报板的节目单
        $scope.cmsTabp = [];            // 用于存放选择的情报板的节目单下标
        $scope.editModel = [];          // 存放临时模型
        $scope.cmsModel = {
            color: '#FFFF00',
            textalign: 'center',
            family: 'SimHei',
            type: '0',
            time: '3'
        };           // 
        $scope.colors = false;
        $scope.viewid = 'cmscompile';
        $scope.compile = false;
        $scope.cmsTpl = true;
        $scope.cmsList = false;
        $scope.modelList = false;
        $scope.inputPosi = true;

        // 鹰眼
        $scope.moveNeagle = function(elem){
            var cmap = elem.find('cmap'),
                follow = elem.find('img'),
                ewrap = elem.find('eagle'),
                eagle = elem.find('eawindow'),
                bgctrl = elem.find('bgctrl'),
                borderwid = 320;
            
            var movePercent = setModStyle();

            cmap.bind('mousedown', moveMousedown);
            bgctrl.bind('mousedown', bgMousedown);

            function setModStyle(){
                cmap.css({width: follow.width(), height: follow.height()});
                var percent = cmap.width() / cmap.height();
                if(percent >= 4 / 3){
                    ewrap.css({'width': borderwid, 'height': (borderwid / percent).toFixed(2)});
                } else {
                    ewrap.css({'width': (borderwid / 4 * 3 * percent).toFixed(2), 'height': borderwid / 4 * 3});
                }
                ewrap.css({'background-image': 'url(' + follow.attr('src') + ')', 'background-size': ewrap.width() + 'px ' + ewrap.height() + 'px'})

                var epercent = ewrap.width() / cmap.width();
                eagle.css({'width': ($(window).width() * epercent).toFixed(2), 'height': ($(window).height() * epercent).toFixed(2)});
                return (cmap.width() / ewrap.width());
            }

            function moveMousedown(event){
                var disX = event.clientX - cmap.position().left,
                    disY = event.clientY - cmap.position().top,
                    minX = $(window).width() - cmap.width(), maxX = 0,
                    minY = $(window).height() - cmap.height(), maxY = 0;

                $(document).bind({
                    'mousemove': moveMousemove,
                    'mouseup': moveMouseup
                });

                function moveMousemove(event){
                    var l = event.clientX - disX;
                    var t = event.clientY - disY;
                    if(l > maxX){
                        l = maxX;
                    }
                    if(l < minX){
                        l = minX;
                    }
                    if(t > maxY){
                        t = maxY;
                    }
                    if(t < minY){
                        t = minY;
                    }
                    cmap.css({'left': l + 'px', 'top': t + 'px'});
                    follow.css({'left': l + 'px', 'top': t + 'px'});
                    eagle.css({'left': -l / movePercent - borderwid + 'px', 'top': -t / movePercent - borderwid + 'px'});
                }

                function moveMouseup(){
                    $(document).unbind({
                        'mousemove': moveMousemove,
                        'mouseup': moveMouseup
                    });
                }
            }

            function bgMousedown(event){
                var mdx = event.offsetX,
                    mdy = event.offsetY,
                    areax = eagle.position().left,
                    areay = eagle.position().top,
                    areawid = eagle.width(),
                    areahei = eagle.height();
                if(mdx <= areax + borderwid || mdx >= areax + borderwid + areawid || mdy <= areay + borderwid || mdy >= areay + borderwid + areahei){
                    var eagle_n_top = mdy - areahei / 2,
                        eagle_n_left = mdx - areawid / 2;
                    if(eagle_n_top < 0){
                        eagle_n_top = 0;
                    }
                    if(eagle_n_top > ewrap.height() - areahei){
                        eagle_n_top = ewrap.height() - areahei;
                    }
                    if(eagle_n_left < 0){
                        eagle_n_left = 0;
                    }
                    if(eagle_n_left > ewrap.width() - areawid){
                        eagle_n_left = ewrap.width() - areawid;
                    }
                    eagle.css({'top': (-borderwid + eagle_n_top), 'left': (-borderwid + eagle_n_left)});
                    cmap.css({'left': -eagle_n_left * movePercent + 'px', 'top': -eagle_n_top * movePercent + 'px'});
                    follow.css({'left': -eagle_n_left * movePercent + 'px', 'top': -eagle_n_top * movePercent + 'px'});
                }
                mdx = event.offsetX - eagle.position().left,
                mdy = event.offsetY - eagle.position().top;
                maxX = ewrap.width() - parseFloat(eagle.css('width')) - borderwid, minX = 0 - borderwid,
                maxY = ewrap.height() - parseFloat(eagle.css('height')) - borderwid, minY = 0 - borderwid;

                bgctrl.bind({
                    'mousemove': bgMousemove,
                    'mouseup': bgMouseup
                });

                function bgMousemove(event){
                    var mmx = event.offsetX - mdx;
                    var mmy = event.offsetY - mdy;
                    if(mmx > maxX){
                        mmx = maxX;
                    }
                    if(mmx < minX){
                        mmx = minX;
                    }
                    if(mmy > maxY){
                        mmy = maxY;
                    }
                    if(mmy < minY){
                        mmy = minY;
                    }
                    eagle.css({'left': mmx + 'px', 'top': mmy + 'px'});
                    cmap.css({'left': -(mmx + borderwid) * movePercent + 'px', 'top': -(mmy + borderwid) * movePercent + 'px'});
                    follow.css({'left': -(mmx + borderwid) * movePercent + 'px', 'top': -(mmy + borderwid) * movePercent + 'px'});
                }

                function bgMouseup(){
                    bgctrl.unbind({
                        'mousemove': bgMousemove,
                        'mouseup': bgMouseup
                    });
                }
            }
        };

         // 获取基本信息
        $scope.cbiThen = function(data){
            // 获取设备的采集变量信息
            $scope.getdata('/cms/getCmsDeviceVarValueInfos.from', JSON.stringify($scope.getdataJson), $scope.cbiLast, data.data);
        };

        // 编辑设备属性，用于显示
        $scope.cbiLast = function(data){
            var _data = data.data;
            $scope.prevdata = data.successData;
            // 基本信息
            for(var i = 0, l = $scope.prevdata.length; i < l; i++){
                $scope.prevdata[i].deviceVar = {};
                $scope.prevdata[i].status = {
                    alertType: {},
                    alertArr: [],
                    alertText: '正常',
                    alertColor: '#029d0c'
                };
                $scope.cmsBasicInf.push($scope.prevdata[i]);
                $scope.deviceMap.put($scope.prevdata[i].orgId + '' + $scope.prevdata[i].deviceId, i);
            }
            for(var i = 0, l = _data.length; i < l; i++){
                var _key = _data[i].orgId + '' + _data[i].deviceId,
                    browseNo = $scope.deviceMap.get(_key);
                $scope.cmsBasicInf[browseNo].deviceVar[(_data[i].typeId + '')] = _data[i];
            }
            console.log($scope.cmsBasicInf);
            $scope.io = true;
        };

        $scope.uploadData = function(resp){
            if(!$scope.io){
                return $scope.io;
            }
            var data = (JSON.parse(resp)).datalist,
                browseArr = [];
            for(var i = 0, l = data.length; i < l; i++){
                var key = data[i].orgid + '' + data[i].deviceid,
                    browseNo = $scope.deviceMap.get(key);

                var devicevar = $scope.cmsBasicInf[browseNo].deviceVar;
                for(var j in devicevar){
                    if(devicevar[j].deviceVarId == data[i].deivcevarid && typeof(eval(data[i].devicevarvalue)) == 'object'){
                        devicevar[j].deviceVarValue = eval(data[i].devicevarvalue);
                        devicevar[j].deviceSendTime = data[i].devicevardatetime;
                        break;
                    }
                }
            }
            return $scope.io;
        };

        $scope.uploadStatus = function(resp){
            if(!$scope.io){
                return $scope.io;
            }
            var data = (JSON.parse(resp)).alertlist;
            for(var i = 0, l = data.length; i < l; i++){
                var key = data[i].orgid + '' + data[i].deviceid,
                    browseNo = $scope.deviceMap.get(key);
                var status = $scope.cmsBasicInf[browseNo].status;
                if(status.alertType[data[i].devicevartype]){
                    if($.inArray(data[i].alertid, $scope.alertArr) >= 0){
                        delete status.alertType[data[i].devicevartype];
                        var _jsonN = $.inArray(data[i].alertDesc, status.alertArr);
                        status.alertArr.splice(_jsonN, 1);
                    } else {
                        status.alertType[data[i].devicevartype].id = data[i].alertid;
                        status.alertType[data[i].devicevartype].desc = data[i].alertDesc;
                    }
                } else {
                    status.alertType[data[i].devicevartype] = {};
                    status.alertType[data[i].devicevartype].id = data[i].alertid;
                    status.alertType[data[i].devicevartype].desc = data[i].alertDesc;
                    status.alertArr.push(data[i].alertDesc);
                }
                if($.isEmptyObject(status.alertType)){
                    status.alertText = '正常';
                    status.alertColor = '#029d0c';
                } else {
                    status.alertText = '故障';
                    if(status.alertArr.length === 1){
                        status.alertText = status.alertArr[0];
                    }
                    status.alertColor = '#ff0000';
                }
            }
            return $scope.io;
        };

        // 选择情报板
        $scope.showCmsInfo = function(n){
            if($scope.cmsBasicInf[n] == null || $scope.cmsBasicInf[n] == ''){
                alert('所选情报板不在检测范围！');
                return;
            }
            $scope.compile = true;
            $scope.cmsInfo = $scope.cmsBasicInf[n];
            $timeout(function(){
                if($scope.cmsTimer != ''){
                    $interval.cancel($scope.cmsTimer);
                }
                $scope.cmsProgram = [];
                $scope.cmsTabp = [];
                var programs = $('cmscompile cms').find('pwrap');
                var props = $('cmscompile cnav').find('p');
                var programl = programs.length;
                if(programl === 0){
                    return;
                }
                for(var i = 0; i < programl; i++){
                    $scope.cmsProgram.push(programs.eq(i));
                    $scope.cmsTabp.push(props.eq(i));
                }
                var programNow = 0;
                $scope.cmsProgram[programNow].css('right', 0);
                $scope.cmsTabp[programNow].css('background-color', '#0069cb');
                $scope.cmsTimer = $interval(function(){
                    var pro = $scope.cmsProgram[programNow];
                    pro.animate({'right': '100%'}, 240, 'swing', function(){
                        pro.css('right', '');
                    });
                    $scope.cmsTabp[programNow].css('background-color', '');
                    programNow++;
                    if(programNow > programl - 1){
                        programNow = 0;
                    }
                    $scope.cmsTabp[programNow].css('background-color', '#0069cb');
                    $scope.cmsProgram[programNow].animate({'right': '0'}, 240, 'swing');
                }, 2000);
            },30);
        };

        $scope.issue = function(devinfo, id){
            var cmsContent = [],
                cms = {},
                cmsdiv = $('#' + id).parent()
                cmsList = cmsdiv.find('p'),
                cmsListLast = cmsdiv.find('div').eq(0);
            var json = {};
            json.displayWidth = parseInt(devinfo.cmsSizeDesc.split('×')[0]);
            json.displayHeight = parseInt(devinfo.cmsSizeDesc.split('×')[1]);
            json.dispScrType = devinfo.cmsColor;
            json.timeDelay = parseInt($scope.cmsModel.time);
            json.transition = parseInt($scope.cmsModel.type);
            json.param = 23;
            json.wordList = [];
            for(var i = 0, l = cmsList.length + 1; i < l; i++){
                var con;
                if(i + 1 === l){
                    con = cmsListLast;
                } else {
                    con = cmsList.eq(i);
                }
                var cjson = {};
                cjson.wordXXX = parseInt(con.css('text-indent'));
                cjson.wordYYY = parseInt(con.position().top) - parseInt(cmsdiv.css('padding'));
                cjson.fontColor = rgb216(cmsdiv.css('color')).replace(/#/g,'');
                cjson.fontBackColor = '00FF00';
                cjson.fontShadowColor = '000000';
                cjson.wordSpace = parseInt(con.css('letter-spacing'));
                cjson.fontSize_HH = parseInt(con.css('font-size'));
                cjson.fontSize_WW = parseInt(con.css('font-size'));
                cjson.wordContent = con.html();
                // json.wordList = json.wordList + cjson_str + ',';
                json.wordList.push(cjson);
            }
            var json_str = JSON.stringify(json);
            // json.wordList = json.wordList.substring(0, json.wordList.length - 1) + ']';
            // console.log(json_str);

            var msgcontentArr = [];
            var msgcontentjson = {};
            msgcontentjson.collnode = 1;
            msgcontentjson.orgid = devinfo.orgId;
            msgcontentjson.deviceid = devinfo.deviceId;
            msgcontentjson.devicevarid = devinfo.deviceVar[devinfo.issuedTypeId].deviceVarId;
            msgcontentjson.devicetypeid = devinfo.deviceVar[devinfo.issuedTypeId].typeId;
            msgcontentjson.sendcontents = '[' + json_str + ']';
            msgcontentArr.push(msgcontentjson);

            var msgjson = {};
            msgjson.msgtype = 'devicectl';
            msgjson.msgcontent = JSON.stringify(msgcontentArr);
            var msgjson_str = JSON.stringify(msgjson);
            socket.emit('controlevent', msgjson_str);
        };

        // 重置滚动条
        $scope.resetScroll = function(time){
            $timeout(function(){
                customFunc();
            }, time);
        };

        $scope.inputPosition = function(){
            $timeout(function(){
                var inputs = $('multitxta').find('input');
                for(var i = 0, l = inputs.length; i < l; i++){
                    var next = inputs.eq(i).next();
                    inputs.eq(i).css({
                        'top': next[0].offsetTop,
                        'left': next[0].offsetLeft
                    });
                }
            }, 30);
            
        };

        $scope.stopProp = function($event){
            $event.stopPropagation();
        };

        // http方法（通用）
        $scope.getdata = function(url, data, successFn, successData, errorFn, errorData){
            $http({
                method: 'POST',
                url: basepath + url + '?ran=' + Math.random(),
                data: data,
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                }  
            })
            .then(function(resp){
                resp.successData = successData;
                successFn(resp);
            }, function(resp){
                resp.errorData = errorData;
                errorFn(resp);
            });
        };

        $(window).ready(function(){
            // 获取设备基本信息
            $scope.getdata('/cms/getCmsBasicInfos.from', JSON.stringify($scope.getdataJson), $scope.cbiThen);
        });
	}])
})(angular);

