(function(angular){

	var controllers = angular.module('app.controllers', []);

	controllers.controller('pollingController', ['$scope', '$http', '$interval', '$timeout', 'socket', function($scope, $http, $interval, $timeout, socket){

        /* socket.io */
        socket.on("connect", function(){
            // console.log('<span class="connect-msg">Client has connected to the server!</span>');
        });
        
        socket.on("disconnect", function(){
            console.log('<span class="disconnect-msg">The client has disconnected!</span>');
        });
        
        //数据
        socket.on("uploaddataEvent", function(data){
            var boo = $scope.uploadData(data);
            if(!boo){
                var timer = $interval(function(){
                    if($scope.io){
                        $scope.uploadData(data);
                        $interval.cancel(timer);
                    }
                }, 100);
            }
        });
        
        //告警
        socket.on("alertinfoEvent", function(data){
            var boo = $scope.uploadStatus(data);
            if(!boo){
                var timer = $interval(function(){
                    if($scope.io){
                        $scope.uploadStatus(data);
                        $interval.cancel(timer);
                    }
                }, 100);
            }
        });
            
        //发送标志
        socket.on("sendflagEvent", function(data){
            console.log(data);
        });
        /* socket.io END */

        // 
        $scope.getdataJson = {};        // http获取数据时，所需的条件数据
        $scope.pandect = '';            // 存储筛选条件
        $scope.cmsBasicInf = [];        // 存储情报板基本信息
        $scope.cmsLastInf = [];         // 存储最新发布情报板基本信息
        $scope.cmsCount = 0;            // 情报板数量
        $scope.cmsChecked = [];         // 存储被选择的情报板信息
        $scope.io = false;              // 动态数据可以整合的标志
        $scope.patrolBegin = true;      // 巡检启动标志，防止多次启动 
        $scope.patrolTimer = '';        // 巡检定时器
        $scope.browse = [];             // 巡检定模型盒子
        $scope.alertArr = [100000,100001];// 正常状态码
        $scope.pandectJson = {          // 存储筛选项信息
            lines: [],
            roads: [],
            position: [],
            direct: [],
            types: []
        };
        $scope.pandectFlag = {          // 用来判断情报板是否显示的标志，需配合筛选项
            lines: true,
            roads: true,
            position: true,
            direct: true,
            types: true
        };
        $scope.deviceMap = new Map();

        $scope.editHeader = false;      // 判断显示标志
        $scope.io = false;              // 动态数据可以整合的标志
        $scope.getdataJson = {};        // http获取数据时，所需的条件数据
        // $scope.cmsBasicInf = [];        // 存储情报板基本信息
        $scope.cmsInfo = {};            // 存储选择的情报板信息
        $scope.deviceMap = new Map();   // 
        $scope.cmsTimer = '';           // 选择的情报板的轮巡定时器
        $scope.cmsProgram = [];         // 用于存放选择的情报板的节目单
        $scope.cmsTabp = [];            // 用于存放选择的情报板的节目单下标
        $scope.editModel = [];          // 存放临时模型
        $scope.cmsModel = {
            color: '#FFFF00',
            textalign: 'center',
            family: 'SimHei',
            type: '0',
            time: '3'
        };           // 
        $scope.colors = false;
        $scope.viewid = 'cmscompile';
        $scope.compile = false;
        $scope.cmsTpl = true;
        $scope.cmsList = false;
        $scope.modelList = false;
        $scope.inputPosi = true;
        $scope.aeFlag = 'add';
        $scope.msgarr = '';
        $scope.setNewCmsCount = -1;

        // function
        // 选择或取消选择情报板
        $scope.ich = function(dev, org, val){
            if(val){
                $scope.cmsChecked.push(org + '' + dev);
                return;
            }
            if(!val){
                while($.inArray((org + '' + dev), $scope.cmsChecked) >= 0){
                    $scope.cmsChecked.splice($.inArray((org + '' + dev), $scope.cmsChecked), 1);
                }
            }
        };
        
        // 存储筛选条件
        $scope.pandectThen = function(data){
            $scope.pandect = data.data;
        };

        // 设备筛选
        $scope.deviceshow = function(pandect, device){
            var road = pandect.roads, position = pandect.position, direct = pandect.direct, types = pandect.types,
                droad = device.roads, dposition = device.position, ddirect = device.direct, dtypes = device.types;
            if(road && position && direct && types){
                return true;
            } else {
                var _arr = [road, position, direct, types],
                    _arr_dev = [droad, dposition, ddirect, dtypes];
                for(var i = 0, l = _arr.length; i < l; i++){
                    if(_arr[i]){
                        _arr_dev[i] = '';
                    }
                }
                var _boo = true;
                for(var i = 0, l = _arr_dev.length; i < l; i++){
                    if(_arr_dev[i] === ''){
                        continue;
                    }
                    _boo = _boo && _arr_dev[i];
                }
                return _boo;
            }
        };

        // 筛选及重置滚动条
        $scope.resetScroll = function(time){
            for(var i = 0, l = $scope.cmsBasicInf.length; i < l; i++){
                var val = filtrate($scope.cmsBasicInf[i], $scope.pandectJson);
            }
            filtrateFlag($scope.pandectFlag, $scope.pandectJson);

            function filtrateFlag(val, condition){
                if(condition.lines.length > 0){
                    for(var i = 0, l = condition.lines.length; i < l; i++){
                        if(condition.lines[i] != '' && typeof(condition.lines[i]) != "undefined"){
                            val.lines = false;
                            break;
                        }
                        val.lines = true;
                    }
                }
                if(condition.roads.length > 0){
                    for(var i = 0, l = condition.roads.length; i < l; i++){
                        if(condition.roads[i] != '' && typeof(condition.roads[i]) != "undefined"){
                            val.roads = false;
                            break;
                        }
                        val.roads = true;
                    }
                }
                if(condition.position.length > 0){
                    for(var i = 0, l = condition.position.length; i < l; i++){
                        if(condition.position[i] != '' && typeof(condition.position[i]) != "undefined"){
                            val.position = false;
                            break;
                        }
                        val.position = true;
                    }
                }
                if(condition.direct.length > 0){
                    for(var i = 0, l = condition.direct.length; i < l; i++){
                        if(condition.direct[i] != '' && typeof(condition.direct[i]) != "undefined"){
                            val.direct = false;
                            break;
                        }
                        val.direct = true;
                    }
                }
                if(condition.types.length > 0){
                    for(var i = 0, l = condition.types.length; i < l; i++){
                        if(condition.types[i] != '' && typeof(condition.types[i]) != "undefined"){
                            val.types = false;
                            break;
                        }
                        val.types = true;
                    }
                }
                return val;
            }

            function filtrate(val, condition){
                var _lines = condition.lines.removeNull();
                if(_lines.length > 0){
                    if($.inArray(val.id, _lines) >= 0){
                        val.lines = true;
                    } else {
                        val.lines = false;
                    }
                } else {
                    val.lines = true;
                }

                var _roads = condition.roads.removeNull();
                if(_roads.length > 0){
                    for(var i = 0, l = _roads.length; i < l; i++){
                        if($.inArray(_roads[i], val.roadArr) >= 0){
                            val.roads = true;
                            break;
                        } else {
                            val.roads = false;
                        }
                    }
                    if(val.roads){
                        for(var i = 0, l = val.devices.length; i < l; i++){
                            if($.inArray(val.devices[i].roadId, _roads) >= 0){
                                val.devices[i].roads = true;
                            } else {
                                val.devices[i].roads = false;
                            }
                        }
                    }
                } else {
                    val.roads = true;
                }

                var _position = condition.position.removeNull();
                if(_position.length > 0){
                    val.position = false;
                    for(var i = 0, l = val.devices.length; i < l; i++){
                        if($.inArray(val.devices[i].devicePosition, _position) >= 0){
                            val.devices[i].position = true;
                        } else {
                            val.devices[i].position = false;
                        }
                    }
                } else {
                    val.position = true;
                }

                var _direct = condition.direct.removeNull();
                if(_direct.length > 0){
                    val.direct = false;
                    for(var i = 0, l = val.devices.length; i < l; i++){
                        if($.inArray(val.devices[i].deviceDirect, _direct) >= 0){
                            val.devices[i].direct = true;
                        } else {
                            val.devices[i].direct = false;
                        }
                    }
                } else {
                    val.direct = true;
                }

                var _types = condition.types.removeNull();
                if(_types.length > 0){
                    val.types = false;
                    for(var i = 0, l = val.devices.length; i < l; i++){
                        if($.inArray(val.devices[i].cmsType, _types) >= 0){
                            val.devices[i].types = true;
                        } else {
                            val.devices[i].types = false;
                        }
                    }
                } else {
                    val.types = true;
                }
                return val;
            }

            $timeout(function(){
                customFunc();
            }, time);
        };

        // 获取基本信息
        $scope.cbiThen = function(data){
            // 获取设备的采集变量信息
            $scope.getdata('/cms/getCmsDeviceVarValueInfos.from', JSON.stringify($scope.getdataJson), $scope.cbiLast, data.data);
        };

        // 编辑设备属性，用于显示
        $scope.cbiLast = function(data){
            var _data = data.data;
            $scope.prevdata = data.successData;
            // 基本信息
            $scope.cmsCount = $scope.prevdata.length;
            for(var i = 0, l = $scope.prevdata.length; i < l; i++){
                $scope.prevdata[i].roads = true;
                $scope.prevdata[i].position = true;
                $scope.prevdata[i].direct = true;
                $scope.prevdata[i].types = true;
                $scope.prevdata[i].deviceVar = {};
                $scope.prevdata[i].status = {
                    alertType: {},
                    alertArr: [],
                    alertText: '正常',
                    alertColor: '#029d0c'
                };
                var _prevdata = {};
                var j = 0, jl = $scope.cmsBasicInf.length;
                for(; j < jl; j++){
                    if($scope.cmsBasicInf[j].id == $scope.prevdata[i].routeLineId){
                        if($.inArray($scope.prevdata[i].roadId, $scope.cmsBasicInf[j].roadArr) < 0){
                            $scope.cmsBasicInf[j].roadArr.push($scope.prevdata[i].roadId);
                        }
                        $scope.cmsBasicInf[j].devices.push($scope.prevdata[i]);
                        break;
                    }
                }
                if(j === jl){
                    $scope.cmsBasicInf[jl] = {};
                    $scope.cmsBasicInf[jl].id = $scope.prevdata[i].routeLineId;
                    $scope.cmsBasicInf[jl].name = $scope.prevdata[i].routeLineName;
                    $scope.cmsBasicInf[jl].roadArr = [];
                    $scope.cmsBasicInf[jl].roadArr.push($scope.prevdata[i].roadId);
                    $scope.cmsBasicInf[jl].devices = [];
                    $scope.cmsBasicInf[jl].devices.push($scope.prevdata[i]);
                    $scope.cmsBasicInf[jl].lines = true;
                    $scope.cmsBasicInf[jl].roads = true;
                }
                _prevdata.lineX = j;
                _prevdata.devX = $scope.cmsBasicInf[j].devices.length - 1;
                $scope.deviceMap.put($scope.prevdata[i].orgId + '' + $scope.prevdata[i].deviceId, _prevdata);
            }
            // console.log($scope.cmsBasicInf);
            for(var i = 0, l = _data.length; i < l; i++){
                var _key = _data[i].orgId + '' + _data[i].deviceId,
                    _deviceX = $scope.deviceMap.get(_key);
                $scope.cmsBasicInf[_deviceX.lineX].devices[_deviceX.devX].deviceVar[(_data[i].typeId + '')] = _data[i];
            }
            $scope.io = true;
        };

        $scope.uploadData = function(resp){
            if(!$scope.io){
                return $scope.io;
            }
            var data = (JSON.parse(resp)).datalist,
                browseArr = [];
            for(var i = 0, l = data.length; i < l; i++){
                var key = data[i].orgid + '' + data[i].deviceid,
                    deviceX = $scope.deviceMap.get(key),
                    browseNo = deviceX.devX;

                var devicevar = $scope.cmsBasicInf[deviceX.lineX].devices[deviceX.devX].deviceVar;
                for(var j in devicevar){
                    if(devicevar[j].deviceVarId == data[i].deivcevarid && typeof(eval(data[i].devicevarvalue)) == 'object'){
                        devicevar[j].deviceVarValue = eval(data[i].devicevarvalue);
                        break;
                    }
                }
                if(!$scope.patrolBegin){
                    for(var k = 0, kl = deviceX.lineX; k < kl; k++){
                        browseNo = parseInt(browseNo) + $scope.cmsBasicInf[k].length;
                    }
                    browseArr.push(browseNo);
                }
                
            } 
            $timeout(function(){
                $scope.patrol();
            }, 70);
            return $scope.io;
        };

        $scope.uploadStatus = function(resp){
            if(!$scope.io){
                return $scope.io;
            }
            var data = (JSON.parse(resp)).alertlist;
            // console.log(data);
            for(var i = 0, l = data.length; i < l; i++){
                var key = data[i].orgid + '' + data[i].deviceid,
                    deviceX = $scope.deviceMap.get(key);
                var status = $scope.cmsBasicInf[deviceX.lineX].devices[deviceX.devX].status;
                if(status.alertType[data[i].devicevartype]){
                    if($.inArray(data[i].alertid, $scope.alertArr) >= 0){
                        delete status.alertType[data[i].devicevartype];
                        var _jsonN = $.inArray(data[i].alertDesc, status.alertArr);
                        status.alertArr.splice(_jsonN, 1);
                    } else {
                        status.alertType[data[i].devicevartype].id = data[i].alertid;
                        status.alertType[data[i].devicevartype].desc = data[i].alertDesc;
                    }
                } else {
                    status.alertType[data[i].devicevartype] = {};
                    status.alertType[data[i].devicevartype].id = data[i].alertid;
                    status.alertType[data[i].devicevartype].desc = data[i].alertDesc;
                    status.alertArr.push(data[i].alertDesc);
                }
                if($.isEmptyObject(status.alertType)){
                    status.alertText = '正常';
                    status.alertColor = '#029d0c';
                } else {
                    status.alertText = '故障';
                    if(status.alertArr.length === 1){
                        status.alertText = status.alertArr[0];
                    }
                    status.alertColor = '#ff0000';
                }
            }
            return $scope.io;
        };

        // 巡检
        $scope.patrol = function(){
            $scope.browse = [];
            var browse = $('browse');
            for(var i = 0, l = browse.length; i < l; i++){
                var _bcms = browse.eq(i).find('bcms');
                var _browse = {};
                _browse.screens = [];
                _browse.tips = [];
                _browse.count = browse.eq(i).find('*[setstop]').attr('count');
                _browse.length = 0;
                _browse.width = _bcms.width();
                _browse.height = _bcms.height();
                if(browse.eq(i).find('pwrap').length > 0){
                    var _pwrap = browse.eq(i).find('pwrap'),
                        _cnav = browse.eq(i).find('cnav').find('p');
                    _browse.length = _pwrap.length;
                    _pwrap.eq(_browse.count).css('right', 0);
                    _cnav.eq(_browse.count).css('width', '16px');
                    for(var j = 0, jl = _pwrap.length; j < jl; j++){
                        _browse.screens.push(_pwrap.eq(j));
                        _browse.tips.push(_cnav.eq(j));
                    }
                }
                $scope.browse.push(_browse);
            }
            if($scope.patrolBegin){
                $scope.patrolBegin = false;
                $scope.patrolTimer = $interval(function(){
                    for(var i = 0, l = $scope.browse.length; i < l; i++){
                        if($scope.browse[i].screens.length > 0){
                            if($scope.browse[i].screens[0].parents('bpreview').attr('stop') == 'true'){
                                continue;
                            }
                            (function(i){
                                var screen = $scope.browse[i].screens,
                                    tips = $scope.browse[i].tips,
                                    count = $scope.browse[i].screens[0].parents('bpreview').attr('count'),
                                    length = $scope.browse[i].length,
                                    width = $scope.browse[i].width,
                                    height = $scope.browse[i].height,
                                    _screen = screen[count];
                                _screen.animate({'right': width + 'px'}, 200, 'swing', function(){
                                    _screen.css({'right': '-100%'});
                                });
                                tips[count].animate({'width': '8px'}, 200, 'swing');
                                count++;
                                if(count > length - 1){
                                    count = 0;
                                }
                                screen[count].animate({'right': 0 + 'px'}, 200, 'swing');
                                tips[count].animate({'width': '16px'}, 200, 'swing');
                                $scope.browse[i].count = count;
                                $scope.browse[i].screens[0].parents('bpreview').attr('count', count);
                            })(i);
                        }
                    }
                }, 3000);
            }
        };

        // 重置筛选项
        $scope.resetPandect = function(){
            for(var i in $scope.pandectJson){
                $scope.pandectJson[i] = [];
            }
            for(var i in $scope.pandectFlag){
                $scope.pandectFlag[i] = true;
            }
        };

        // 
        $scope.showCmsInfo = function(device){
            $scope.compile = true;
            $scope.cmsTpl = true;
            $scope.editModel = '';
            $scope.cmsInfo = device;
            $timeout(function(){
                if($scope.cmsTimer != ''){
                    $interval.cancel($scope.cmsTimer);
                }
                $scope.cmsProgram = [];
                $scope.cmsTabp = [];
                var programs = $('cmscompile cms').find('pwrap');
                var props = $('cmscompile cnav').find('p');
                var programl = programs.length;
                if(programl === 0){
                    return;
                }
                for(var i = 0; i < programl; i++){
                    $scope.cmsProgram.push(programs.eq(i));
                    $scope.cmsTabp.push(props.eq(i));
                }
                var oldCount = $('cmscompile preview[count]').attr('count');
                $('cmscompile preview[count]').attr('count', 0);
                $scope.cmsProgram[oldCount].css('right', '');
                $scope.cmsTabp[oldCount].css('background-color', '');
                $scope.cmsProgram[0].css('right', 0);
                $scope.cmsTabp[0].css('background-color', '#0069cb');
                $scope.cmsTimer = $interval(function(){
                    var programNow = $('cmscompile preview[count]').attr('count');
                    var pro = $scope.cmsProgram[programNow];
                    if(pro.parents('*[setstop]').attr('stop') === 'true'){
                        return;
                    }
                    pro.animate({'right': '100%'}, 240, 'swing', function(){
                        pro.css('right', '');
                    });
                    $scope.cmsTabp[programNow].css('background-color', '');
                    programNow++;
                    if(programNow > programl - 1){
                        programNow = 0;
                    }
                    $scope.cmsTabp[programNow].css('background-color', '#0069cb');
                    $scope.cmsProgram[programNow].animate({'right': '0'}, 240, 'swing');
                    $('cmscompile preview[count]').attr('count', programNow);
                }, 3000);
            },30);
        };

        $scope.issue = function(devinfo, id){
            $scope.cmsLastInf = [];
            $scope.cmsLastInf.push(devinfo);
            $scope.setNewCms(devinfo, id, $scope.setNewCmsCount);
            socket.emit('controlevent', $scope.msgarr);
            $scope.compile = false;
            $interval.cancel($scope.cmsTimer);
            $scope.setNewCmsCount = -1;
        };

        $scope.setNewCms = function(devinfo, id, ae){
            // console.log(devinfo);
            var cmsContent = [],
                cms = {},
                cmsdiv = $('#' + id).parent()
                cmsList = cmsdiv.find('p'),
                cmsListLast = cmsdiv.find('div').eq(0),
                oldList = devinfo.deviceVar[devinfo.issuedTypeId].deviceVarValue,
                json = {};
            json.displayWidth = parseInt(devinfo.cmsSizeDesc.split('×')[0]);
            json.displayHeight = parseInt(devinfo.cmsSizeDesc.split('×')[1]);
            json.dispScrType = parseInt(devinfo.cmsColor);
            json.timeDelay = parseInt($scope.cmsModel.time);
            json.transition = parseInt($scope.cmsModel.type);
            json.param = 23;
            json.wordList = [];
            for(var i = 0, l = cmsList.length + 1; i < l; i++){
                var con;
                if(i + 1 === l){
                    con = cmsListLast;
                } else {
                    con = cmsList.eq(i);
                }
                var cjson = {},
                    ctext = con.html(),
                    csize = parseInt(con.css('font-size')),
                    cspace = parseInt(con.css('letter-spacing'));
                cjson.wordXXX = (json.displayWidth - ctext.length * (csize + cspace) + cspace) / 2;
                cjson.wordYYY = parseInt(con.position().top) - parseInt(cmsdiv.css('padding')) + parseInt(con.css('margin-top'));
                cjson.fontColor = rgb216(cmsdiv.css('color')).replace(/#/g,'');
                cjson.fontBackColor = '00FF00';
                cjson.fontShadowColor = '000000';
                cjson.wordSpace = cspace;
                cjson.fontSize_HH = csize;
                cjson.fontSize_WW = csize;
                cjson.wordContent = ctext;
                cjson.fontName = $scope.returnFamilyType(cmsdiv.css('font-family'));
                json.wordList.push(cjson);
            }
            oldList[ae] = json;
            var json_str = JSON.stringify(oldList);

            var msgcontentArr = [];
            var msgcontentjson = {};
            msgcontentjson.collnode = 1;
            msgcontentjson.orgid = devinfo.orgId;
            msgcontentjson.deviceid = devinfo.deviceId;
            msgcontentjson.devicevarid = devinfo.deviceVar[devinfo.issuedTypeId].deviceVarId;
            msgcontentjson.devicetypeid = devinfo.deviceVar[devinfo.issuedTypeId].typeId;
            msgcontentjson.sendcontents = json_str;
            msgcontentArr.push(msgcontentjson);

            var msgjson = {};
            msgjson.msgtype = 'devicectl';
            msgjson.msgcontent = JSON.stringify(msgcontentArr);
            var msgarr =[];
            msgarr.push(msgjson)
            $scope.msgarr = JSON.stringify(msgarr);
        };

        // 重置滚动条
        $scope.resetScroll = function(time){
            $timeout(function(){
                customFunc();
            }, time);
        };

        $scope.compClose = function(){
            $scope.compile = false;
            $interval.cancel($scope.cmsTimer);
        }

        $scope.inputPosition = function(){ 
            console.log($scope.cmsInfo.deviceVar[$scope.cmsInfo.issuedTypeId]);
            // $scope.aeFlag = aeFlag;
            // if(aeFlag === 'edit'){
            //     $scope.aeFlag = parseInt($('cmscompile preview').attr('count'));
            // }
            // $timeout(function(){
            //     var inputs = $('multitxta').find('input');
            //     for(var i = 0, l = inputs.length; i < l; i++){
            //         var next = inputs.eq(i).next();
            //         inputs.eq(i).css({
            //             'top': next[0].offsetTop,
            //             'left': next[0].offsetLeft
            //         });
            //     }
            // }, 30);
        };

        $scope.inputsPosi = function(){
            $timeout(function(){
                var inputs = $('cmscompile btns').find('input');
                for(var i = 0, l = inputs.length; i < l; i++){
                    var next = inputs.eq(i).next();
                    inputs.eq(i).css({
                        'top': next[0].offsetTop,
                        'left': next[0].offsetLeft
                    });
                }
                $('cmscompile edittpl cnav').find('p').eq(0).click();
            },20);
        };

        $scope.stopProp = function($event){
            $event.stopPropagation();
        };

        $scope.changeCmsInfo = function(attr, val){
            var in_str = 'fontColor fontSize_HH fontSize_WW';
            console.log(val);
            console.log($scope.cmsInfo);
            var json = $scope.cmsInfo.deviceVar[$scope.cmsInfo.issuedTypeId].deviceVarValue[$scope.setNewCmsCount];
            if(in_str.indexOf(attr) >= 0){
                for(var i = 0, l = json.wordList.length; i < l; i++){
                    json.wordList[i][attr] = val;
                    if(attr.indexOf('Size') >= 0){
                        json.wordList[i].fontSize_HH = val
                    }
                }
            }
        };

        $scope.returnFamilyType = function(familyName){
            var familyJson = {
                'SimHei': 'h',
                'SimSun': 's',
                'KaiTi': 'k',
                'h': 'SimHei',
                's': 'SimSun',
                'k': 'KaiTi'
            };
            return familyJson[familyName];
        };

        $scope.cmscompile = function(cms, cmsInfo, viewid, ae){
            console.log(cmsInfo);
            if($scope.setNewCmsCount >= 0){
                $scope.setNewCms(cmsInfo, viewid, $scope.setNewCmsCount);
            }
            $scope.setNewCmsCount = ae;
            
            $scope.cmsModel = {
                color: cms.wordList[0].fontColor,
                textalign: 'center',
                family: 'SimHei',
                type: cms.transition,
                time: cms.timeDelay
            };
            var _html = '';
            for(var i = 0, l = cms.wordList.length; i < l; i++){
                _html = _html + cms.wordList[i].wordContent + '\n';
            }
            $scope.editModel = _html;
        };  






        // http方法（通用）
        $scope.getdata = function(url, data, successFn, successData, errorFn, errorData){
            $http({
                method: 'POST',
                url: basepath + url + '?ran=' + Math.random(),
                data: data,
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                }  
            })
            .then(function(resp){
                resp.successData = successData;
                successFn(resp);
            }, function(resp){
                resp.errorData = errorData;
                errorFn(resp);
            });
        };

        $(window).ready(function(){
            // 获取筛选项信息
            $scope.getdata('/cms/getSearchCondition.from', JSON.stringify($scope.getdataJson), $scope.pandectThen);
            // 获取设备基本信息
            $scope.getdata('/cms/getCmsBasicInfos.from', JSON.stringify($scope.getdataJson), $scope.cbiThen);
        });
	}])
})(angular);

